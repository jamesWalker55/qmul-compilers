# function Test-Lexer {
#   [CmdletBinding()]
#   param (
#     [Parameter()]
#     [String]
#     $path
#   )
#   $outputname = "$(Split-Path $path -Leaf).out"
#   $outputpath = "tests/lexer/$outputname"
#   lexer $path | Out-File -Encoding utf8 $outputpath
# }

# Test-Lexer "./testsuite/lexer/all_else_true.cool"
# Test-Lexer "./testsuite/lexer/arith.cool"
# Test-Lexer "./testsuite/lexer/atoi.cool"
# Test-Lexer "./testsuite/lexer/backslash.cool"
# Test-Lexer "./testsuite/lexer/backslash2.cool"
# Test-Lexer "./testsuite/lexer/badidentifiers.cool"
# Test-Lexer "./testsuite/lexer/badkeywords.cool"
# Test-Lexer "./testsuite/lexer/book_list.cl.cool"
# Test-Lexer "./testsuite/lexer/bothcomments.cool"
# Test-Lexer "./testsuite/lexer/comment_in_string.cl.cool"
# Test-Lexer "./testsuite/lexer/endcomment.cool"
# Test-Lexer "./testsuite/lexer/eofstring.cool"
# Test-Lexer "./testsuite/lexer/escaped_chars_in_comment.cl.cool"
# Test-Lexer "./testsuite/lexer/escapedeof.cool"
# Test-Lexer "./testsuite/lexer/escapednull.cool"
# Test-Lexer "./testsuite/lexer/escapedquote.cool"
# Test-Lexer "./testsuite/lexer/escapedunprintables.cool"
# Test-Lexer "./testsuite/lexer/hairyscary.cool"
# Test-Lexer "./testsuite/lexer/integers2.cool"
# Test-Lexer "./testsuite/lexer/invalidcharacters.cool"
# Test-Lexer "./testsuite/lexer/invalidinvisible.cool"
# Test-Lexer "./testsuite/lexer/io.cool"
# Test-Lexer "./testsuite/lexer/keywords.cool"
# Test-Lexer "./testsuite/lexer/life.cool"
# Test-Lexer "./testsuite/lexer/lineno2.cool"
# Test-Lexer "./testsuite/lexer/lineno3.cool"
# Test-Lexer "./testsuite/lexer/longcomment.cool"
# Test-Lexer "./testsuite/lexer/longstring_escapedbackslashes.cool"
# Test-Lexer "./testsuite/lexer/multilinecomment.cool"
# Test-Lexer "./testsuite/lexer/nestedcomment.cool"
# Test-Lexer "./testsuite/lexer/new_complex.cool"
# Test-Lexer "./testsuite/lexer/null_in_code.cl.cool"
# Test-Lexer "./testsuite/lexer/null_in_string.cl.cool"
# Test-Lexer "./testsuite/lexer/null_in_string_followed_by_tokens.cl.cool"
# Test-Lexer "./testsuite/lexer/null_in_string_unescaped_newline.cl.cool"
# Test-Lexer "./testsuite/lexer/objectid.test.cool"
# Test-Lexer "./testsuite/lexer/opencomment.cool"
# Test-Lexer "./testsuite/lexer/operators.cool"
# Test-Lexer "./testsuite/lexer/palindrome.cool"
# Test-Lexer "./testsuite/lexer/pathologicalstrings.cool"
# Test-Lexer "./testsuite/lexer/s03.test.cool"
# Test-Lexer "./testsuite/lexer/s04.test.cool"
# Test-Lexer "./testsuite/lexer/s05.test.cool"
# Test-Lexer "./testsuite/lexer/s14.test.cool"
# Test-Lexer "./testsuite/lexer/s16.test.cool"
# Test-Lexer "./testsuite/lexer/s19.test.cool"
# Test-Lexer "./testsuite/lexer/s25.test.cool"
# Test-Lexer "./testsuite/lexer/s26.test.cool"
# Test-Lexer "./testsuite/lexer/s31.test.cool"
# Test-Lexer "./testsuite/lexer/s32.test.cool"
# Test-Lexer "./testsuite/lexer/s33.test.cool"
# Test-Lexer "./testsuite/lexer/s34.test.cool"
# Test-Lexer "./testsuite/lexer/simplestrings.cool"
# Test-Lexer "./testsuite/lexer/sort_list.cl.cool"
# Test-Lexer "./testsuite/lexer/stringcomment.cool"
# Test-Lexer "./testsuite/lexer/stringwithescapes.cool"
# Test-Lexer "./testsuite/lexer/twice_512_nested_comments.cl.cool"
# Test-Lexer "./testsuite/lexer/validcharacters.cool"
# Test-Lexer "./testsuite/lexer/weirdcharcomment.cool"
# Test-Lexer "./testsuite/lexer/wq0607-c1.cool"
# Test-Lexer "./testsuite/lexer/wq0607-c2.cool"
# Test-Lexer "./testsuite/lexer/wq0607-c3.cool"
# Test-Lexer "./testsuite/lexer/wq0607-c4.cool"

function Test-Parser {
  [CmdletBinding()]
  param (
    [Parameter()]
    [String]
    $path
  )
  $outputname = "$(Split-Path $path -Leaf).out"
  $outputpath = "tests/parser/$outputname"
  & {bash ./assignments/pa1/reffrontend $path} 2>&1 | Out-File -Encoding utf8 $outputpath
}

Test-Parser "./testsuite/parser/addedlet.test"
Test-Parser "./testsuite/parser/arithprecedence.test"
Test-Parser "./testsuite/parser/assigngetstype.test"
Test-Parser "./testsuite/parser/assignment.test"
Test-Parser "./testsuite/parser/assignseq.test"
Test-Parser "./testsuite/parser/associativity-.test"
Test-Parser "./testsuite/parser/associativity+.test"
Test-Parser "./testsuite/parser/associativitydiv.test"
Test-Parser "./testsuite/parser/associativity-times.test"
Test-Parser "./testsuite/parser/atoi.test"
Test-Parser "./testsuite/parser/attrcapitalname.test"
Test-Parser "./testsuite/parser/badblock.test"
Test-Parser "./testsuite/parser/baddispatch1.test"
Test-Parser "./testsuite/parser/baddispatch2.test"
Test-Parser "./testsuite/parser/baddispatch3.test"
Test-Parser "./testsuite/parser/baddispatch4.test"
Test-Parser "./testsuite/parser/badexprlist.test"
Test-Parser "./testsuite/parser/badfeaturenames.test"
Test-Parser "./testsuite/parser/badfeatures.test"
Test-Parser "./testsuite/parser/casemultiplebranch.test"
Test-Parser "./testsuite/parser/casenoexpr.test"
Test-Parser "./testsuite/parser/classbadinherits.test"
Test-Parser "./testsuite/parser/classbadname.test"
Test-Parser "./testsuite/parser/classmethodonearg.test"
Test-Parser "./testsuite/parser/classnoname.test"
Test-Parser "./testsuite/parser/classonefield.test"
Test-Parser "./testsuite/parser/classtwofields.test"
Test-Parser "./testsuite/parser/compare_expr.cl"
Test-Parser "./testsuite/parser/comparisons-assoc.test"
Test-Parser "./testsuite/parser/complex.test"
Test-Parser "./testsuite/parser/dispatcharglist.test"
Test-Parser "./testsuite/parser/dispatchnoargs.test"
Test-Parser "./testsuite/parser/dispatchonearg.test"
Test-Parser "./testsuite/parser/emptyassign.test"
Test-Parser "./testsuite/parser/emptymethodbody.test"
Test-Parser "./testsuite/parser/emptyprogram.test"
Test-Parser "./testsuite/parser/emptystaticdispatch.test"
Test-Parser "./testsuite/parser/equalsassociativity.test"
Test-Parser "./testsuite/parser/extrasemicolonblock.test"
Test-Parser "./testsuite/parser/firstbindingerrored.test"
Test-Parser "./testsuite/parser/firstclasserrored.test"
Test-Parser "./testsuite/parser/formallists.test"
Test-Parser "./testsuite/parser/ifexpressionblock.test"
Test-Parser "./testsuite/parser/ifnested.test"
Test-Parser "./testsuite/parser/ifnoelse.test"
Test-Parser "./testsuite/parser/ifnoelsebranch.test"
Test-Parser "./testsuite/parser/ifnofi.test"
Test-Parser "./testsuite/parser/ifnothenbranch.test"
Test-Parser "./testsuite/parser/isvoidbadtype.test"
Test-Parser "./testsuite/parser/letassociativity.test"
Test-Parser "./testsuite/parser/letinit.test"
Test-Parser "./testsuite/parser/letinitmultiplebindings.test"
Test-Parser "./testsuite/parser/letnoinit.test"
Test-Parser "./testsuite/parser/letparens.test"
Test-Parser "./testsuite/parser/lteassociativity.test"
Test-Parser "./testsuite/parser/multipleatdispatches.test"
Test-Parser "./testsuite/parser/multipleattributes.test"
Test-Parser "./testsuite/parser/multipleclasses.test"
Test-Parser "./testsuite/parser/multipledispatches.test"
Test-Parser "./testsuite/parser/multiplemethoderrors.test"
Test-Parser "./testsuite/parser/nestedblocks.test"
Test-Parser "./testsuite/parser/nestedlet.test"
Test-Parser "./testsuite/parser/newbadtype.test"
Test-Parser "./testsuite/parser/returntypebad.test"
Test-Parser "./testsuite/parser/secondbindingerrored.test"
Test-Parser "./testsuite/parser/staticdispatchnoargs.test"
Test-Parser "./testsuite/parser/unaryassociativity.test"
Test-Parser "./testsuite/parser/while.test"
Test-Parser "./testsuite/parser/whileexpressionblock.test"
Test-Parser "./testsuite/parser/whilenoloop.test"
Test-Parser "./testsuite/parser/whileoneexpression.test"